package main

import (
	"bufio"
	"fmt"
	"log"
	"os"
	"strconv"
	"strings"
)

var keys = []string{"one", "two", "three", "four", "five", "six", "seven", "eight", "nine"}
var nums = []string{"1", "2", "3", "4", "5", "6", "7", "8", "9"}
var numMap = map[string]rune{
	"one":   '1',
	"two":   '2',
	"three": '3',
	"four":  '4',
	"five":  '5',
	"six":   '6',
	"seven": '7',
	"eight": '8',
	"nine":  '9',
}

func findFirst(line string) string {

	for _, num := range line {
		if num >= '0' && num <= '9' {
			return string(num)
		}
	}

	return ""
}

func findFirstWord(line string) string {
	var firstIdx int = -1
	var firstVal string

	for _, num := range keys {
		numIdx := strings.Index(line, num)
		if numIdx != -1 {
			if numIdx <= firstIdx || firstIdx == -1 {
				firstVal = string(numMap[num])
				firstIdx = numIdx
				fmt.Printf("setting first value to: %s", firstVal)
			}
		}
	}

	fmt.Printf("returning first val: %s", firstVal)
	return firstVal

}

func findLast(line string) string {
	var lastIdx int
	var lastVal string
	for idx, num := range line {
		if (num >= '0' && num <= '9') && idx >= lastIdx {

			lastIdx = idx
			lastVal = string(num)
		}
	}
	return lastVal
}

func findLastWord(line string) string {
	var lastIdx int = -1
	var lastVal string

  type lastWord struct {
    Idx int
    Value string
  }
  var last lastWord = {Idx: -1, Value: ""}

	for _, num := range keys {
		numIdx := strings.Index(line, num)
		if numIdx != -1 {
			if numIdx >= lastIdx || lastIdx == -1 {
				lastVal = string(numMap[num])
				lastIdx = numIdx
				fmt.Printf("setting last value to: %s", lastVal)
			}
		}
	}

	fmt.Printf("returning last val: %s", lastVal)
	return lastVal
}

func addVals(s1 string, s2 string) int {
	fmt.Printf("concating %s and %s\n", s1, s2)
	temp := s1 + s2

	sum, err := strconv.Atoi(temp)
	if err != nil {
		log.Fatal(err)
	}

	return sum
}

func main() {

	file, err := os.Open("./test.txt")
	if err != nil {
		log.Fatal(err)
	}

	defer file.Close()

	scanner := bufio.NewScanner(file)

	var sum int

	for scanner.Scan() {
		line := scanner.Text()
		// find first
		first := findFirstWord(line)
		last := findLastWord(line)

		temp := addVals(first, last)
		sum += temp

	}
	if scanner.Err(); err != nil {
		log.Fatal(err)
	}

	fmt.Println("sum: ", sum)
}
